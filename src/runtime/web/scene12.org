#+TITLE:Merge sort experiment Scene-12
#+AUTHOR: VLEAD
#+DATE: [2017-12-18 MON]
#+SETUPFILE: ../../org-templates/level-2.org
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate
#+OPTIONS: ^:nil'

* Introduction

- This page prompts the user to enter an array and calculates the time complexity for that using mergesort graph.
- Two ways of computation is done.
  - The formula based computation.
  - Computation using the mergesort graph.
- After completing the two ways of computation we compare both the values and prove that they are the same.

* Code and narration
** Index HTML
*** HTML for the experiment

#+BEGIN_SRC  html :tangle templates/scene12.html :eval no :noweb yes
<!DOCTYPE html>
<html lang="en">

  <head>

    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <meta name="description" content="">
    <meta name="author" content="">
    <title>Merge Sort</title>
    <script src="{{ url_for('static', filename='default/js/d3.v3.min.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/dagre-d3.js')}}"></script>

    <!-- Bootstrap core CSS -->
    <link href="{{ url_for('static', filename='default/css/bootstrap.min.css')}}" rel="stylesheet">

    <!-- Plugin CSS -->
    <link href="{{ url_for('static', filename='default/css/dataTables.bootstrap4.css')}}" rel="stylesheet">
    <script src="{{ url_for('static', filename='default/js/jquery.min.js')}}"></script>

    <!-- Custom styles for this template -->
    <link href="{{ url_for('static', filename='default/css/sb-admin.css')}}" rel="stylesheet">
    <style id="css">
      /* This sets the color for "TK" nodes to a light blue green. */
      g.type-TK > rect {
        fill: #00ffd0;
      }
      h6 {
        font-size: 18px;
      }
      .hidden {
        display: none;
      }
      text {
        font-weight: 300;
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serf;
        font-size: 14px;
      }
      i {
          border: solid black;
          border-width: 0 3px 3px 0;
          display: inline-block;
          padding: 3px;
      }
      .left {
        transform: rotate(135deg);
        -webkit-transform: rotate(135deg);
      }
      .down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
        float:right;
      }
      input {
      display: inline-block;
      vertical-align: middle;
      margin: 10px 0;
      }
      #but1 {
      display: inline-block;
      vertical-align: middle;
      }
      #c{
      display: inline-block;
      margin-left: 400px;
      }
      #but2 {
      display: inline-block;
      vertical-align: middle;
      }

      .node rect {
        stroke: #999;
        fill: #fff;
        stroke-width: 1.5px;
      }

      .edgePath path {
        stroke: #333;
        stroke-width: 1.5px;
      }
      /*tspan{
        fill: red;
        font-weight: bold
      }*/
      div{
        z-index:1;
      }
      div.bond
      {
        position: -webkit-sticky; /* Safari */
        position: sticky;
        z-index:3;
        top: -10px;
        background-color: #C8C8C8;
      }
      .bl{
        background-color: lightblue;
      }
    </style>
  </head>

  <body class="fixed-nav sticky-footer bg-dark" id="page-top">

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top" id="mainNav">
      <a class="navbar-brand" href="#">DS-Lab</a>
      <button style="background-color:#bfc9ca;margin-left:31px" class="btn btn-success" onclick="pane()">Pane</button>
      <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarResponsive">
        <ul class="navbar-nav navbar-sidenav" id="exampleAccordion">
          <li class="nav-item active" data-toggle="tooltip" data-placement="right" title="Dashboard">
            <a class="nav-link" href="#">
              <span class="nav-link-text">
                Merge-Sort
              </span>
            </a>
          </li>
          <li class="nav-item" data-toggle="tooltip" data-placement="right" title="References">
            <a class="nav-link nav-link-collapse collapsed" data-toggle="collapse" href="#collapseComponents" data-parent="#exampleAccordion">
              <span class="nav-link-text">
                References
              </span>
              <i class="down"></i>
            </a>
            <ul class="sidenav-second-level collapse" id="collapseComponents">
              <li>
                <a href="https://en.wikipedia.org/wiki/Merge_sort">Wiki-pedia</a>
              </li>
              <li>
                <a href="http://www.geeksforgeeks.org/merge-sort/">Geeks for Geeks</a>
              </li>
            </ul>
          </li>
          <li class="nav-item" data-toggle="tooltip" data-placement="right" title="Example Pages">
            <a class="nav-link nav-link-collapse collapsed" data-toggle="collapse" href="#collapseExamplePages" data-parent="#exampleAccordion">
            <span class="nav-link-text">
                Quizzes
            </span>
            <i class="down"></i>
            </a>
            <ul class="sidenav-second-level collapse" id="collapseExamplePages">
              <li>
                <a href="#">Quiz-1</a>
              </li>
              <li>
                <a href="#">Quiz-2</a>
              </li>
            </ul>
          </li>
        </ul>
        <ul class="navbar-nav sidenav-toggler">
          <li class="nav-item">
            <a class="nav-link text-center" id="sidenavToggler">
              <i class="left"></i>
            </a>
          </li>
        </ul>
        <ul class="navbar-nav ml-auto">
          <ul class="readcrumb">
            <li >
              <a href="#">VLEADS</a>
            </li>
            <li>
              <a href="#">DS -> Merge-Sort</a>
            </li>
          </ul>
          <li class="nav-item">
            <a class="nav-link" data-toggle="modal" data-target="#exampleModal">
              Logout
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <div class="content-wrapper">
      <div class="bond">
        <div class="form-group">
          <label for="arr" style="font-size:130%">Please enter the array to sort (space separated)</label>
          <input type="text" id="arr" class="form-control" style="width:55%;font-size: 120%" >
          <button type="button" id="but1" style="display:inline;position:absolute;left:2%;background-color:#606060;" class="btn btn-success btn-lg" onclick="helper()">Sort</button>
          <h3 id="c">Merge Sort Time Complexity Example</h3>
          <a href='/11' class="btn btn-success btn-lg" style="display:inline;position:absolute;left:83%;background-color:#606060;"><< Back</a>
          <a href='/13' class="btn btn-success btn-lg" style="display:inline;position:absolute;left:92%;background-color:#606060;">Next >></a>
          <button type="button" id="but2" style="display:inline;position:absolute;left:75%;background-color:#606060;" class="btn btn-success btn-lg" onclick="reset1()">Reset</button>
          <br/><br/>
        </div>
      </div>
    <!-- <div class="list-group" style="width:40%">
      <a href="#" class="list-group-item list-group-item-action  list-group-item-info">
        <p>
           Click on the node to split the node into two halves.<br/>
           Repeat the process to see the recursive structure.
        </p>
      </a>
    </div> -->
    <br/><br/>
      <div class="container-fluid" style="position: relative">
        <div id="svg-holder">
        </div>
        <div class="card mb-3">
          <svg id="svg-canvas" width=100% height=600 style="position: absolute;left:700px;top:50px;"></svg>
        </div>
        <div class="list-group" style="width:40%">
          <a href="#" class="list-group-item list-group-item-action list-group-item-success">
            <h5 style="color:black;font-weight: bold">MergeSort Time Complexity Example</h5>
            <ul style="color:black">
              <li><h6>Enter an array of max size 10 elements containing only single digits.</h6></li>
              <li><h6>The array entered will be sorted and mergesort graph will be displayed.</h6></li>
              <li><h6>We will manually compute the number of splits and time for merging the arrays and compare with mergesort time complexity formula. </h6></li>
            </ul>
          </a>
        </div><br/><br/>
        <div style="width:40%" class="list-group answer-holder">
          <a href="#" class="list-group-item list-group-item-action list-group-item-success">
            <h5 style="color:black;font-weight: bold">Computation</h5>
            <ul style="color:black" id="computation-holder">
            </ul>
          </a>
        </div>
        <script src="../static/js/mergesort_example.js"></script>
      </div>
      <br/><br/><br/>
    </div>

    <!-- /.container-fluid -->
    <!-- /.content-wrapper -->
    <!-- Scroll to Top Button -->

    <a class="scroll-to-top rounded" href="#page-top">
      <i class="fa fa-angle-up"></i>
    </a>

    <!-- Logout Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            Select "Logout" below if you are ready to end your current session.
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            <a class="btn btn-primary" href="login.html">Logout</a>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap core JavaScript -->
    <script src="{{ url_for('static', filename='default/js/jquery.min.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/popper.min.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/bootstrap.min.js')}}"></script>

    <!-- Plugin JavaScript -->
    <script src="{{ url_for('static', filename='default/js/jquery.easing.min.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/Chart.min.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/jquery.dataTables.js')}}"></script>
    <script src="{{ url_for('static', filename='default/js/dataTables.bootstrap4.js')}}"></script>

    <!-- Custom scripts for this template -->
    <script src="{{ url_for('static', filename='default/js/sb-admin.min.js')}}"></script>
  </body>

</html>
#+END_SRC

** JS

- =reset1= function to reset the graph.
- This function is called when the reset button is pressed =reset1= function is called. It also resets the variables so that new graph can be constructed.
- =reset= function is called before sort function so that new graph is created and all the global variables are intialised.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function reset()
{
  g = null
  g = new dagreD3.graphlib.Graph()
  .setGraph({})
  .setDefaultEdgeLabel(function() { return {}; });
  ans=[]
  fin=0
  visited=[]
  mymap=new Map()
  final=[]
  split_number = 1;
  document.getElementById('svg-canvas').innerHTML = null
  ul_element.innerHTML = null
  div_element.innerHTML = null
  split_elements = []
  merge_elements = []
}
function reset1()
{
  g = null
  g = new dagreD3.graphlib.Graph()
  .setGraph({})
  .setDefaultEdgeLabel(function() { return {}; });
  ans=[]
  fin=0
  visited=[]
  mymap=new Map()
  final=[]
  split_number = 1;
  document.getElementById('svg-canvas').innerHTML = null
  document.getElementById('arr').value = null
  ul_element.innerHTML = null
  div_element.innerHTML = null
  split_elements = []
  merge_elements = []
}
#+END_SRC

- =pane= function which handles the opening and closing of the top pane.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
// pane function for hiding or displaying the pane
var pane = function()
{
  var x = document.getElementsByClassName('bond');
  // it checks if the pane is hidden , and shows it if its hidden
  if(x[0].style.display == "none")
  {
     x[0].style.display = "block";
  }
  // it hides the displayed pane on clicking the pane button
  else
  {
    x[0].style.display = "none";
  }
};
#+END_SRC

- =helper= function is called when array is entered to be sorted and sort button is clicked.
- It calls various functions including mergesort.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function helper()
{
	// Array to be sorted
  reset();
	element.className = "list-group";
	split_number = 1;
	div_element.innerHTML = null
	var array=document.getElementById('arr').value
	var arr=array.trim().split(" ");
	var length = arr.length;
	var div=mergeSort(arr,0);
	drawedge();
	draw();
	compute(length-1);
}
#+END_SRC

- The function =compute= is invoked from the helper function.
- The function =compute= calls the functions =computeLogn= and =computeMerge=.
- =compute= is used to compute the complexities using the mergesort graph so that computed and theoretical values can be compared.
- =computeLogn= is used to compute nlogn value for a given 'n' and populates the corresponding element with the value.
- =computeMerge= does the merge computation manually and calculates the required number of computations theoretically using mergesort graph.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function computeLogn(n)
{
	var logval = Math.log2(n);
	var ans = n*logval;
	var string = "<li><h6>We know that mergesort takes nlog<sub>2</sub>n computations which is<br/> <b>(" + n.toString() + ' x log<sub>2</sub>' +
					n.toString() + ")</b><br/></h6></li>";
		string += "<ul><li><b>(" + n.toString() + ' x ' + logval.toString() + ")</b> = <b>( " + ans.toString() + " )</b> = <b>" + Math.ceil(ans).toString() + " </li>";
		string += "</b><br/><li><h5 style='color:red'>Hence " + Math.ceil(ans).toString() + ' computations.</h5></li></ul>';
	return string;
}
function computeMerge()
{
	var string = "<li><h6>Merge Computation</h6></li>";
	string += "<ul>";
	var count = 0;
	for(var i = 0; i < merge_elements.length; i++)
	{
		string += '<li><h6 style="font-weight:bold">Merging arrays [';
		string += merge_elements[i][0].toString() + '] and [' + merge_elements[i][1].toString() + '] gives [' + merge_elements[i][2].toString() + ']';
		string += '<br/> => ' + merge_elements[i][2].length.toString() + ' computations<br/></li>';
		count += merge_elements[i][2].length;
	}
	string += '<li><h5 style="color:red">Total ' + count.toString() + ' computations.</li></ul>';
	return string;
}
function compute(length)
{
	var string = "";
	string += "<li><h6>From the graph we can observe that there are<b> " + length.toString() + " splits</b>.</h6></li>";
	string += "<li><h6>This is same as the calculated value <b>n-1</b> for the number of splits which is <b>" + length.toString() + "</b>.</h6></li>";
	string1 = computeMerge();
	string += string1;
	string1 = computeLogn(length + 1);
	string += string1;
	ul_element.innerHTML = string;
	return;
}
#+END_SRC

- Global definition of the final graph using d3 syntax.
- This section also contains some global definitions of maps and variables.
- =split_number=, =div_element=, =ul_element= are used to populate the corresponding html tags with appropriate values.
- =merge_elements= are used to keep track of the merged arrays to show them in computation.
- =split_number= are used to keep track of the nodes which are splitting to get their locations in svg.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
var g = new dagreD3.graphlib.Graph()
.setGraph({})
.setDefaultEdgeLabel(function() { return {}; });

// Set of global variables

var ans=[]
var fin=0
var visited=[]
var mymap=new Map()

//Merge sort function

// Global graph definition

var g = new dagreD3.graphlib.Graph()
.setGraph({})
.setDefaultEdgeLabel(function() { return {}; });

// Set of global variables
var split_number;
var split_elements = [];
var merge_elements = [];
var div_element = document.getElementById('svg-holder');
var ul_element = document.getElementById('computation-holder');
var element = document.getElementsByClassName('answer-holder');
element = element[0];
var ans=[]
var fin=0
var visited=[]
var mymap=new Map()
var final=[]
#+END_SRC

- Main Merge sort function.Nodes are also constructed with id and data.
- ID is marked by the 2*i & 2*i+1 rule as evident in a binary tree.
- Data is unsorted arrays.As total nodes are 2^n we also store this quantity for logical purposes.
- Also a map is made which maps Node ID to Node data(array).
- Basic merge function which takes in two arrays and returns merged array.
- =findArrayString= function takes an array in and returns a string with elements of the array separated by spaces.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function mergeSort(arr,count)
{
    var lab=arr.toString();
	var string = "";
	string = findArrayString(arr);
    //Making a node in the graph for the current array string
	g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});

	//Variable for storing maximum count of the node
	fin=Math.max(fin,count)


	visited.push(count)

	//Maping which node number contains which string array
	mymap[count]=lab;

    //Base case
    if (arr.length < 2)
    {
      return arr;
    }

 	//Merge sort
    var middle = parseInt(arr.length / 2);
    var left   = arr.slice(0, middle);
    var right  = arr.slice(middle, arr.length);
    var temp=merge(mergeSort(left,2*count+1),mergeSort(right,2*count+2));

    return temp;

}

//Merge function of merge sort. Standard code which has a result array and temporarily element is copied to this and finally returned
function merge(left, right)
{
    var result = [];

    while (left.length && right.length) {
        if (left[0] <= right[0]) {
            result.push(left.shift());
        } else {
            result.push(right.shift());
        }
    }

    while (left.length)
        result.push(left.shift());

    while (right.length)
        result.push(right.shift());

    return result;
}
function findArrayString(arr)
{
	var string = "";
	string += arr[0].toString();
	for(var i = 1; i < arr.length; i++)
	{
		string += " " + arr[i].toString();
	}
	return string;
}
#+END_SRC

- Main function which renders the graph after we have added nodes and edges using d3 syntax.
- D3 is mixed with svg syntax and height,width is adjusted to suit the html.
- Basic d3 selectors along with dagre.js syntax.
- =addSplitElements= function adds the split notation at locations where array is going to split.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function draw()
{
	g.nodes().forEach(function(v)
	{
		 var node = g.node(v);
	  	// Round the corners of the nodes
	  	node.rx = node.ry = 5;
	})

	// Create the renderer
	var render = new dagreD3.render();

	// Set up an SVG group so that we can translate the final graph.
	var svg = d3.select("svg"),
	svgGroup = svg.append("g");

	// Run the renderer. This is what draws the final graph.
	render(d3.select("svg g"), g);
	// Center the graph
	var xCenterOffset = (svg.attr("width") - g.graph().width) / 2;
	svgGroup.attr("transform", "translate(" + xCenterOffset + ", 20)");
	svg.attr("height", g.graph().height + 40);
	addSplitElements();
}
function addSplitElements()
{
	div_element = document.getElementById('svg-holder');
	for(var i=0;i<split_elements.length;i++)
	{
		var string = "";
		node = split_elements[i][0];
		var x = node.x + 690;
		var y = node.y + 85;
		string += '<div style="position:absolute;color:red;font-weight:bold;left:' + x.toString() + 'px;top:' + y.toString() + 'px;">SPLIT-' + split_elements[i][1].toString() + '</div>';
		div_element.innerHTML += string;
	}
	return;
}
#+END_SRC

- Funtion which connects individual components.Slightly complex logic - as nodes are not uniform but distributed among levels that too some levels partially filled.Main problem is generating 1st and 2nd levels of merge part manually then we can combne them using the same logic of binary merging.
- Comments are there to explain particular section of the code.This function is divided into individual parts and each part is explained with a short line for better understanding.
- First part is to merge splitted nodes.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
function drawedge()
{
	var count=fin+1;

	var row=parseInt((fin+2)/2);


	//Connecting nodes between split nodes.
	//Connecting already present nodes with their children i.e. 2*i+1 & 2*i+2

	for(i=0;i<=fin;i++)
	{

		if(visited.indexOf(i)!=-1 && visited.indexOf(2*i+1)!=-1 && visited.indexOf(2*i+2)!=-1 )
		{

			g.setEdge(i,2*i+1,{});
			g.setEdge(i,2*i+2,{});
			// addSplitElement(g.node(i), split_number);
			split_elements.push([g.node(i),split_number]);
			split_number++;
		}
  }
#+END_SRC

-This part of the function will check and merge the last levels of the split segment using the fact that these nodes will not have any children so visited array for these will be empty.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
var mid=parseInt((fin)/2);

      //Temp array will have nodes at last,2nd last and 3rd last levels which will be merged manually

      var temparray=[]

// This loop is for constructing the nodes of the first level of merge from the last level of split

//Mid is the starting index of the first element of the last row

for(i=mid;i<=fin;i=i+2)
{
  // If the node in present

  if(visited.indexOf(i)!=-1)
  {
    var arr1=mymap[i];
    var arr2=mymap[i+1];
    //arr1 and arr2 contains both the neighboring strings obtained using map


    tarr1=arr1.split(",");
    tarr2=arr2.split(",");

    tarr1=tarr1.map(function(x){return parseInt(x)})
    tarr2=tarr2.map(function(x){return parseInt(x)})

    //tarr1 and tarr2 contains the final two neighbouring arrays


    var temp=merge(tarr1,tarr2);

                      var str=temp.toString();

                      //Str contains the array converted to commar separated strings.

                      //syntax for making a new node with id as count and label as str

                      // Count is continued from fin i.e 2^n
    var string = "";
    string = findArrayString(temp);
    g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});
    mymap[count]=str;
    //Made the node and mapped it to its corresponding count

    //This array will be used in the subsequent loops

    temparray.push(count);

    //Made edges to this node
    g.setEdge(i,count,{label:"O(" + arr1.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
    g.setEdge(i+1,count,{label:"O(" + arr2.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
    merge_elements.push([arr1.split(','),arr2.split(','),temp]);
    //Increment the count for thr next node
    count=count+1;

  }

}
#+END_SRC

- Similar to above one this will check for 2nd last level.
- This code handles 2 cases-First:When this node has no neighbour => It has to merged with already new generated merge node from last level.
- Second:Both the neigbours are there => Both of them have to be merged.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
	fin=mid;
	mid=(mid-1)/2;
	var curr=0
	//var final=[]
	//This loop sees if their is any node in the 2nd last level such that they are not merged with neighbour or have one merge less

	for(i=mid;i<fin;i+=2)
	{
		// If both the neighbours have not been mapped i.e. They have no children

		if(mymap[2*i+1]==null && mymap[2*i+2]==null && mymap[2*i+3]==null && mymap[2*i+4]==null )
		{
			var arr1=mymap[i];
			var arr2=mymap[i+1];
			tarr1=arr1.split("");
			tarr2=arr2.split("");
			tarr1=tarr1.map(function(x){return parseInt(x)})
			tarr2=tarr2.map(function(x){return parseInt(x)})


			var temp=merge(tarr1,tarr2);

			var str=temp.toString();
			var string = "";
			string = findArrayString(temp);
			g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});
			mymap[count]=str;

			final.push(count)
			g.setEdge(i,count,{label:"O(" + arr1.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
			g.setEdge(i+1,count,{label:"O(" + arr2.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
			merge_elements.push([arr1.split(','),arr2.split(','),temp]);
			count=count+1;

		}
		//If the neignour has children and this node has to be merged with the result of its children.

		else if(mymap[2*i+1]==null && mymap[2*i+2]==null)
		{
			var arr1=mymap[i];
			var arr2=mymap[temparray[curr]];


			tarr1=arr1.split(",");
			tarr2=arr2.split(",");

			tarr1=tarr1.map(function(x){return parseInt(x)})
			tarr2=tarr2.map(function(x){return parseInt(x)})


			var temp=merge(tarr1,tarr2);

			var str=temp.toString();
			var string = "";
			string = findArrayString(temp);
			g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});
			mymap[count]=str;
			final.push(count)
			g.setEdge(i,count,{label:"O(" + arr1.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
			g.setEdge(temparray[curr],count,{label:"O(" + arr2.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
			merge_elements.push([arr1.split(','),arr2.split(','),temp]);
			count=count+1;
			curr=curr+1;
		}

	}
#+END_SRC

- This will merge temparray nodes one by one and add them to final array which will then be merged using binary logic.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
  for(i=curr;i<temparray.length;i+=2)
  {
  	var arr1=mymap[temparray[i]];
  	var arr2=mymap[temparray[i+1]];


  	tarr1=arr1.split(",");
  	tarr2=arr2.split(",");


  	tarr1=tarr1.map(function(x){return parseInt(x)})
  	tarr2=tarr2.map(function(x){return parseInt(x)})



  	var temp=merge(tarr1,tarr2);

    	       var str=temp.toString();
    	var string = "";
  	string = findArrayString(temp);
  	g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});
  	mymap[count]=str;
  	final.push(count)
  	g.setEdge(temparray[i],count,{label:"O(" + arr1.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
  	g.setEdge(temparray[i+1],count,{label:"O(" + arr2.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
  	merge_elements.push([arr1.split(','),arr2.split(','),temp]);
  	count=count+1;
  }
#+END_SRC

- Final part which will merge the nodes using binary logic and stops when final array is empty.

#+BEGIN_SRC  javascript :tangle /static/js/mergesort_example.js :eval no :noweb yes
  while(1)
  {
    var arr1=mymap[final[0]];
    var arr2=mymap[final[1]];
    console.log(arr1, arr2);

                if(arr2 == null)break;

                tarr1=arr1.split(",");
    tarr2=arr2.split(",");

    tarr1=tarr1.map(function(x){return parseInt(x)})
    tarr2=tarr2.map(function(x){return parseInt(x)})

                var temp=merge(tarr1,tarr2);
          var str=temp.toString();
      var string = "";
      string = findArrayString(temp);
                g.setNode(count,{ label: string,class: "type-TOP",labelStyle: "font-weight:bold"});
    mymap[count]=str;
    final.push(count)
    g.setEdge(final[0],count,{label:"O(" + arr1.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
    g.setEdge(final[1],count,{label:"O(" + arr2.split(',').length.toString() + ")",labelStyle:"fill:blue;font-weight:bold"});
    merge_elements.push([arr1.split(','),arr2.split(','),temp]);
                count=count+1;
    final.splice(0,1);

    final.splice(0,1);


    if(final.length<=1)break;

  }
}
#+END_SRC
